"""
Problem 12:
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import math


def factors(num):
    num_of_factors = 0
    for i in range(1, int(math.sqrt(num))+1):
        if num % i == 0:  # this is a divisor; its pair will also be added
            num_of_factors += 1
            if i != num / i:  # if this factor is the square root of the number, it shouldn't be double-counted
                num_of_factors += 1
    return num_of_factors


def solution12(num_of_factors):
    # Returns the first triangular number to have num_of_factors factors
    triangle_number_index = 1
    triangle_number = 1
    while True:
        if factors(triangle_number) > num_of_factors:
            return triangle_number
        triangle_number_index += 1
        triangle_number += triangle_number_index


print(solution12(500))
